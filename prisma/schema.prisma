// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum DocumentPermission {
  READ
  WRITE
  ADMIN
}

enum DocumentVisibility {
  PRIVATE
  PUBLIC
  TEAM
}

enum CollaborationStatus {
  ACTIVE
  INACTIVE
  INVITED
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String?
  name                 String?
  avatar               String?
  image                String?
  role                 UserRole              @default(USER)
  emailVerified        Boolean               @default(false)
  emailVerificationToken String?
  resetToken           String?
  resetTokenExpiration DateTime?
  lastActiveAt         DateTime              @default(now())
  isOnline             Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relations
  ownedDocuments       Document[]            @relation("DocumentOwner")
  collaborations       DocumentCollaborator[]
  sessions             Session[]
  activities           Activity[]
  comments             Comment[]
  accounts             Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Document {
  id           String              @id @default(cuid())
  title        String
  content      String              @default("")
  visibility   DocumentVisibility  @default(PRIVATE)
  isDeleted    Boolean             @default(false)
  deletedAt    DateTime?
  version      Int                 @default(1)
  lastEditedAt DateTime            @default(now())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Owner relation
  ownerId      String
  owner        User                @relation("DocumentOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relations
  collaborators DocumentCollaborator[]
  versions     DocumentVersion[]
  activities   Activity[]
  comments     Comment[]

  @@map("documents")
}

model DocumentCollaborator {
  id         String              @id @default(cuid())
  permission DocumentPermission  @default(READ)
  status     CollaborationStatus @default(INVITED)
  invitedAt  DateTime            @default(now())
  joinedAt   DateTime?
  lastAccessAt DateTime?

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
  @@map("document_collaborators")
}

model DocumentVersion {
  id          String   @id @default(cuid())
  version     Int
  content     String
  changeLog   String?
  createdAt   DateTime @default(now())

  // Relations
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdById String

  @@unique([documentId, version])
  @@map("document_versions")
}

model Activity {
  id         String   @id @default(cuid())
  action     String   // e.g., "created", "edited", "shared", "commented"
  details    String?  // JSON string for additional details
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  position  String?  // JSON string for cursor position in document
  isResolved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Reply system
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@map("comments")
}
